#!/usr/bin/env python3
"""
Script de migration pour convertir les fichiers physiques en stockage BLOB
"""

import os
import sys
from flask import Flask
from extensions import db
from models.student import ClassFile
from models.file_manager import UserFile

def create_app():
    """Cr√©er l'application Flask pour la migration"""
    app = Flask(__name__)
    
    # Configuration de base (m√™me que config.py)
    basedir = os.path.abspath(os.path.dirname(__file__))
    app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL') or \
        'sqlite:///' + os.path.join(basedir, 'database', 'teacher_planner.db')
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    
    # Initialiser l'extension
    db.init_app(app)
    
    return app

def migrate_class_files():
    """Migrer les fichiers de classe vers le stockage BLOB"""
    print("üîÑ Migration des fichiers de classe...")
    
    class_files = ClassFile.query.all()
    print(f"üìä Total class files found: {len(class_files)}")
    
    migrated_count = 0
    error_count = 0
    already_migrated = 0
    
    for class_file in class_files:
        try:
            # Ignorer si d√©j√† migr√©
            if class_file.file_content:
                already_migrated += 1
                continue
            
            print(f"üîç Processing file {class_file.id}: {class_file.original_filename}")
            
            # Construire le chemin du fichier physique
            file_path = os.path.join(
                'uploads', 'class_files', 
                str(class_file.classroom_id), 
                class_file.filename
            )
            
            if os.path.exists(file_path):
                # Lire le contenu du fichier
                with open(file_path, 'rb') as f:
                    file_content = f.read()
                
                # D√©terminer le type MIME
                mime_type = 'application/octet-stream'
                if class_file.file_type == 'pdf':
                    mime_type = 'application/pdf'
                elif class_file.file_type in ['jpg', 'jpeg']:
                    mime_type = 'image/jpeg'
                elif class_file.file_type == 'png':
                    mime_type = 'image/png'
                
                # Mettre √† jour le fichier avec le contenu BLOB
                class_file.file_content = file_content
                class_file.mime_type = mime_type
                
                migrated_count += 1
                print(f"‚úÖ {class_file.original_filename} -> BLOB")
                
            else:
                print(f"‚ö†Ô∏è  Fichier physique introuvable: {file_path}")
                error_count += 1
                
        except Exception as e:
            print(f"‚ùå Erreur pour {class_file.original_filename}: {e}")
            error_count += 1
    
    # Sauvegarder les changements
    try:
        db.session.commit()
        print(f"üéâ Migration class files termin√©e: {migrated_count} fichiers migr√©s, {already_migrated} d√©j√† migr√©s, {error_count} erreurs")
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Erreur lors de la sauvegarde: {e}")

def migrate_user_files():
    """Migrer les fichiers utilisateur vers le stockage BLOB"""
    print("üîÑ Migration des fichiers utilisateur...")
    
    user_files = UserFile.query.all()
    print(f"üìä Total user files found: {len(user_files)}")
    
    migrated_count = 0
    error_count = 0
    already_migrated = 0
    
    for user_file in user_files:
        try:
            # Ignorer si d√©j√† migr√©
            if user_file.file_content:
                already_migrated += 1
                continue
            
            print(f"üîç Processing user file {user_file.id}: {user_file.original_filename}")
            
            # Construire le chemin du fichier physique
            file_path = user_file.get_file_path()
            
            if os.path.exists(file_path):
                # Lire le contenu du fichier principal
                with open(file_path, 'rb') as f:
                    file_content = f.read()
                
                user_file.file_content = file_content
                
                # Migrer aussi la miniature si elle existe
                thumbnail_path = user_file.get_thumbnail_path()
                if thumbnail_path and os.path.exists(thumbnail_path):
                    with open(thumbnail_path, 'rb') as f:
                        thumbnail_content = f.read()
                    user_file.thumbnail_content = thumbnail_content
                
                migrated_count += 1
                print(f"‚úÖ {user_file.original_filename} -> BLOB")
                
            else:
                print(f"‚ö†Ô∏è  Fichier physique introuvable: {file_path}")
                error_count += 1
                
        except Exception as e:
            print(f"‚ùå Erreur pour {user_file.original_filename}: {e}")
            error_count += 1
    
    # Sauvegarder les changements
    try:
        db.session.commit()
        print(f"üéâ Migration user files termin√©e: {migrated_count} fichiers migr√©s, {already_migrated} d√©j√† migr√©s, {error_count} erreurs")
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Erreur lors de la sauvegarde: {e}")

def ensure_database_schema():
    """S'assurer que toutes les tables et colonnes existent"""
    print("üîÑ V√©rification du sch√©ma de base de donn√©es...")
    
    try:
        # Cr√©er toutes les tables si elles n'existent pas
        db.create_all()
        
        # V√©rifier si les colonnes existent avant de les ajouter
        from sqlalchemy import text, inspect
        
        inspector = inspect(db.engine)
        
        # D√©terminer le type de base de donn√©es pour choisir le bon type BLOB
        db_type = db.engine.dialect.name
        blob_type = "BYTEA" if db_type == "postgresql" else "BLOB"
        print(f"üîç Base de donn√©es d√©tect√©e: {db_type}, utilisant le type: {blob_type}")
        
        # V√©rifier les colonnes pour class_files
        if 'class_files' in inspector.get_table_names():
            columns = [col['name'] for col in inspector.get_columns('class_files')]
            
            if 'file_content' not in columns:
                db.session.execute(text(f"ALTER TABLE class_files ADD COLUMN file_content {blob_type}"))
                print("‚úÖ Colonne file_content ajout√©e √† class_files")
            
            if 'mime_type' not in columns:
                db.session.execute(text("ALTER TABLE class_files ADD COLUMN mime_type VARCHAR(100)"))
                print("‚úÖ Colonne mime_type ajout√©e √† class_files")
        
        # V√©rifier les colonnes pour user_files
        if 'user_files' in inspector.get_table_names():
            columns = [col['name'] for col in inspector.get_columns('user_files')]
            
            if 'file_content' not in columns:
                db.session.execute(text(f"ALTER TABLE user_files ADD COLUMN file_content {blob_type}"))
                print("‚úÖ Colonne file_content ajout√©e √† user_files")
            
            if 'thumbnail_content' not in columns:
                db.session.execute(text(f"ALTER TABLE user_files ADD COLUMN thumbnail_content {blob_type}"))
                print("‚úÖ Colonne thumbnail_content ajout√©e √† user_files")
        
        db.session.commit()
        print("‚úÖ Sch√©ma de base de donn√©es v√©rifi√©")
        
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Erreur lors de la v√©rification du sch√©ma: {e}")

if __name__ == '__main__':
    app = create_app()
    
    with app.app_context():
        print("üöÄ D√©but de la migration vers le stockage BLOB")
        
        # √âtape 1: V√©rifier le sch√©ma de base de donn√©es
        ensure_database_schema()
        
        # √âtape 2: Migrer les fichiers de classe
        migrate_class_files()
        
        # √âtape 3: Migrer les fichiers utilisateur
        migrate_user_files()
        
        print("üéâ Migration termin√©e!")