#!/usr/bin/env python3
"""
Script de diagnostic pour comprendre pourquoi P4 est retourn√© au lieu de P1
"""

import os
import sys
from datetime import datetime, date
from flask import Flask
from extensions import db
from models.planning import Planning
from models.schedule import Schedule

def create_app():
    """Cr√©er l'application Flask pour le diagnostic"""
    app = Flask(__name__)
    
    # Configuration de base (m√™me que config.py)
    basedir = os.path.abspath(os.path.dirname(__file__))
    app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL') or \
        'sqlite:///' + os.path.join(basedir, 'database', 'teacher_planner.db')
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    
    # Initialiser l'extension
    db.init_app(app)
    
    return app

def debug_lesson_detection():
    """Diagnostic de la d√©tection de le√ßon pour 2025-09-01"""
    target_date = date(2025, 9, 1)
    weekday = target_date.weekday()  # 0 = Lundi
    
    print(f"üîç Diagnostic pour {target_date} (weekday: {weekday})")
    
    # Chercher toutes les planifications pour cette date
    print(f"\nüìã Planifications pour {target_date}:")
    plannings = Planning.query.filter_by(date=target_date).all()
    print(f"Total planifications trouv√©es: {len(plannings)}")
    
    for planning in plannings:
        print(f"  - ID: {planning.id}, P{planning.period_number}, classroom_id: {planning.classroom_id}, mixed_group_id: {planning.mixed_group_id}, title: {planning.title}")
        if planning.classroom:
            print(f"    Classroom: {planning.classroom.name}")
        if planning.mixed_group:
            print(f"    Mixed Group: {planning.mixed_group.name}")
    
    # Chercher tous les schedules pour ce jour de la semaine
    print(f"\nüìÖ Schedules pour weekday {weekday}:")
    schedules = Schedule.query.filter_by(weekday=weekday).all()
    print(f"Total schedules trouv√©s: {len(schedules)}")
    
    for schedule in schedules:
        print(f"  - ID: {schedule.id}, P{schedule.period_number}, classroom_id: {schedule.classroom_id}, mixed_group_id: {schedule.mixed_group_id}, custom_task: {schedule.custom_task_title}")
        if schedule.classroom:
            print(f"    Classroom: {schedule.classroom.name}")
        if schedule.mixed_group:
            print(f"    Mixed Group: {schedule.mixed_group.name}")
    
    # Analyser les p√©riodes dans l'ordre
    print(f"\nüéØ Analyse p√©riode par p√©riode:")
    for period_num in range(1, 10):  # P1 √† P9
        print(f"\n--- P√©riode {period_num} ---")
        
        # Chercher planning
        planning = Planning.query.filter_by(
            date=target_date,
            period_number=period_num
        ).first()
        
        if planning:
            is_lesson = planning.classroom_id or planning.mixed_group_id
            print(f"  Planning trouv√©: ID={planning.id}, is_lesson={is_lesson}")
            if is_lesson:
                print(f"  ‚úÖ LESSON DETECTED VIA PLANNING: P{period_num}")
                break
        else:
            print(f"  Pas de planning trouv√©")
            
        # Chercher schedule
        schedule = Schedule.query.filter_by(
            weekday=weekday,
            period_number=period_num
        ).first()
        
        if schedule:
            is_lesson = schedule.classroom_id or schedule.mixed_group_id
            print(f"  Schedule trouv√©: ID={schedule.id}, is_lesson={is_lesson}")
            if is_lesson:
                print(f"  ‚úÖ LESSON DETECTED VIA SCHEDULE: P{period_num}")
                break
        else:
            print(f"  Pas de schedule trouv√©")
    
    print(f"\nüéØ Conclusion: Le syst√®me devrait retourner la premi√®re le√ßon trouv√©e ci-dessus")

if __name__ == '__main__':
    app = create_app()
    
    with app.app_context():
        print("üöÄ D√©but du diagnostic de d√©tection de le√ßon")
        debug_lesson_detection()
        print("üéâ Diagnostic termin√©!")